<?php
class Parcel
{
  private $database;

  public function __construct()
  {
    include("Database.php");
    $this->database = $con;
  }


  /**
   * Destructor method to close the database connection when the object is destroyed.
   *
   * @return void
   */
  function __destruct()
  {
    $this->database->close();
    // ob_end_flush();
  }

  /**
   * Validates and sanitizes input data to prevent SQL injection.
   *
   * @param string $data The input data to be validated and sanitized.
   *
   * @return string The sanitized and validated data.
   */
  function validate($data)
  {
    $data = trim($data);
    $data = $this->database->real_escape_string($data);
    return $data;
  }


  /**
   * Inserts a new record into the listing table.
   *
   * @param array $data An associative array containing the column names as keys and their corresponding values.
   *
   * @return bool|mysqli_result Returns true if the query is successful, otherwise returns the mysqli_result object.
   *
   * @throws Exception If the database connection fails.
   */
  function insert($data)
  {
    $columns = implode(", ", array_keys($data));
    $values = "'" . implode("', '", array_values($data)) . "'";
    $query = "INSERT INTO parcels ($columns) VALUES ($values)";
    return $this->database->query($query);
  }


  /**
   * Retrieves the ID of the last inserted record in the database.
   *
   * This method is useful after inserting a new record into the database using the `insert()` method.
   * It retrieves the ID generated by the database for the last inserted record.
   *
   * @return int The ID of the last inserted record.
   */
  function getLastInsertId()
  {
    return $this->database->insert_id;
  }

  /**
   * Updates a record in the 'parcels' table based on the provided data and condition.
   *
   * @param array $data An associative array containing the column names as keys and their corresponding values to be updated.
   * @param string $where The condition to identify the record(s) to be updated.
   *
   * @return bool|mysqli_result Returns true if the query is successful, otherwise returns the mysqli_result object.
   *
   * @throws Exception If the database connection fails.
   */
  function update($data, $where)
  {
    $set = [];
    foreach ($data as $key => $value) {
      $value = $this->validate($value);
      $set[] = "$key = '$value'";
    }
    $set = implode(", ", $set);
    $query = "UPDATE parcels SET $set WHERE $where";
    return $this->database->query($query);
  }

  /**
   * Deletes records from the 'parcels' table based on the provided condition.
   *
   * @param string $where The condition to identify the record(s) to be deleted.
   *
   * @return bool|mysqli_result Returns true if the query is successful, otherwise returns the mysqli_result object.
   *
   * @throws Exception If the database connection fails.
   */
  function delete($where)
  {
    $query = "DELETE FROM parcels WHERE $where";
    return $this->database->query($query);
  }

  /**
   * Retrieves records from the 'parcels' table based on the provided condition.
   *
   * @param string|null $where The condition to identify the record(s) to be retrieved.
   * If null, all records will be returned.
   *
   * @return mysqli_result|bool Returns the mysqli_result object containing the retrieved records if successful.
   * If no records are found, returns false.
   *
   * @throws Exception If the database connection fails.
   */
  function get($where = null)
  {
    $whereQuery = ($where) ? "WHERE $where" : "";
    $query = "SELECT * FROM parcels $whereQuery";
    $result = $this->database->query($query);
    if ($result->num_rows > 0) {
      return $result;
    } else {
      return false;
    }
  }

  /**
   * Retrieves records from the 'acceptance' table based on the provided condition.
   *
   * @param string|null $where The condition to identify the record(s) to be retrieved.
   * If null, all records will be returned.
   *
   * @return mysqli_result|bool Returns the mysqli_result object containing the retrieved records if successful.
   * If no records are found, returns false.
   *
   * @throws Exception If the database connection fails.
   */
  function getAcceptance($where = null)
  {
    $whereQuery = ($where) ? "WHERE $where" : "";
    $query = "SELECT * FROM acceptance $whereQuery";
    $result = $this->database->query($query);
    if ($result->num_rows > 0) {
      return $result;
    } else {
      return false;
    }
  }

  /**
   * Retrieves all records from the 'parcels' table.
   *
   * @return mysqli_result|bool Returns the mysqli_result object containing all records if successful.
   * If no records are found, returns false.
   *
   * @throws Exception If the database connection fails.
   */
  function getAll()
  {
    $query = "SELECT * FROM parcels";
    $result = $this->database->query($query);
    if ($result->num_rows > 0) {
      return $result;
    } else {
      return false;
    }
  }

  /**
   * Retrieves a record from the 'parcels' table based on the provided ID.
   *
   * @param int $id The unique identifier of the record to be retrieved.
   *
   * @return array|bool Returns the associative array containing the record data if successful.
   * If no record is found, returns false.
   *
   * @throws Exception If the database connection fails.
   */
  function getById($id)
  {
    $query = "SELECT * FROM parcels WHERE id = $id LIMIT 1";
    $result = $this->database->query($query);
    if ($result->num_rows > 0) {
      return $result->fetch_assoc();
    } else {
      return false;
    }
  }
}
